#!/bin/sh -eu
#
# Checks password against haveibeenpwned.com databases.
#
# Requires: curl, cut, grep, sed, shasum
#
# License: MIT

# Config
pass_check_api_url="https://api.pwnedpasswords.com"

# Ask user password
stty -echo
read -p "Password you want to check: " pass
stty echo
printf "\n---\n"

# Compute full password hash
pass_hash=$(printf "$pass" | shasum | cut -d' ' -f1)
pass=""
echo "Password SHA1: $pass_hash"

# Send first 5 characters of password hash for verification
# See also: https://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/
pass_hash_head=$(echo "$pass_hash" | head -c5)
echo "Sending first 5 characters of SHA1 ('$pass_hash_head') to $pass_check_api_url for verification..."
pass_hash_list=$(curl -s "$pass_check_api_url/range/$pass_hash_head") || exit 1
pass_hash_list=$(echo "$pass_hash_list" | sed "s/^/$pass_hash_head/" | tr '[A-F]' '[a-f]')
echo "---"

# Search for the full password hash in the received list
pass_hash_match=$(echo "$pass_hash_list" | grep "$pass_hash" || echo '')
if [ -n "$pass_hash_match" ]; then
    times_listed="$(echo $pass_hash_match | grep -o '[0-9a-f:]\+' | cut -d: -f2)"
    echo "This password is listed $times_listed times in the known databases."
    echo "IMPORTANT! If you still use this password somewhere, change it as soon as possible!"
    exit 1
fi

echo "This password was not found in the known databases."
